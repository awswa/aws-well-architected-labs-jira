AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves Budgets data
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: budgets
  GlueRoleArn:
    Type: String
    Default: "cron(30 12 1 * ? *)"
    Description: Cloud watch event Schedule to trigger the lambda 
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
Outputs:
  AthenaSavedQuery:
    Description: This saved query will provide you a summary of your lambda data
    Value:
      Ref: AthenaQuery
  LambdaRoleARN:
    Description: Role for Lambda execution of lambda data.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
  SQSUrl:
    Description: TaskQueue URL the account collector lambda
    Value: !Ref TaskQueue
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}Lambda-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
      Policies:
        - PolicyName: !Sub "Assume-Management-${CFDataName}-Account-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:aws:iam::*:role/${MultiAccountRoleName}" # Need to assume a Read role in all Accounts
        - PolicyName: !Sub "${CFDataName}-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                Resource: !Ref  DestinationBucketARN
              - Effect: "Allow"
                Action:
                  - "glue:StartCrawler"
                Resource: !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/${Crawler}"
              - Effect: "Allow"
                Action:
                  - "cloudwatch:GetMetricStatistics"
                Resource: "*"  ## only * can be used as a Resource for this action
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:BudgetsModule-TaskQueue
              - Effect: "Allow"
                Action:
                  - "budgets:ViewBudget"
                  - "budgets:Describe*"
                Resource: !Sub "arn:aws:budgets:${AWS::Region}:${AWS::AccountId}:*"
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub
          - '${CFDataName}-Lambda-Function-${Id}'
          - Id: !Select [0, !Split ['-', !Ref AWS::StackName]]
      Description: !Sub "LambdaFunction to retrieve ${CFDataName}"
      Runtime: python3.8
      Code:
        ZipFile: |
          #Author Stephanie Gooch 2021
          import boto3
          import os
          import json
          import datetime
          from json import JSONEncoder
          import logging
          from botocore.client import Config
          from botocore.exceptions import ClientError

          bucket = os.environ["BUCKET_NAME"]
          prefix = os.environ["PREFIX"]
          crawler = os.environ["CRAWLER_NAME"]
          role_name = os.environ['ROLENAME']

          # subclass JSONEncoder
          class DateTimeEncoder(JSONEncoder):
            # Override the default method
            def default(self, obj):
                if isinstance(obj, (datetime.date, datetime.datetime)):
                    return obj.isoformat()

          def assume_role(account_id, service):
              role_arn = f"arn:aws:iam::{account_id}:role/{role_name}"
              sts_client = boto3.client('sts')
              
              try:
                assumedRoleObject = sts_client.assume_role(
                    RoleArn=role_arn,
                    RoleSessionName="cross_acct_lambda"
                    )
                
                credentials = assumedRoleObject['Credentials']
                client = boto3.client(
                    service,
                    aws_access_key_id=credentials['AccessKeyId'],
                    aws_secret_access_key=credentials['SecretAccessKey'],
                    aws_session_token=credentials['SessionToken']
                )
                return client
              
              except ClientError as e:
                logging.warning(f"Unexpected error Account {account_id}: {e}")
                return None

          def lambda_handler(event, context):
              try:
                  if 'Records' not in event: 
                      raise Exception("Please do not trigger this Lambda manually. Find an Accounts-Collector-Function-OptimizationDataCollectionStack Lambda  and Trigger from there.")
                  for record in event['Records']:
                      body = json.loads(record["body"])
                      account_id = body["account_id"]
                      account_name = body["account_name"]
                      payer_id = body["payer_id"]
                      print(account_id)
                      budgets_client = assume_role(account_id, "budgets")
                      paginator = budgets_client.get_paginator("describe_budgets") #Paginator for a large list of accounts
                      response_iterator = paginator.paginate(AccountId=account_id)
                      with open("/tmp/data.json", "w") as f:
                          for budgets in response_iterator:
                              for budget in budgets['Budgets']:
                                  print(budget)
                                  budget.update({'Account_ID': account_id, 'Account_Name': account_name})
                                  if 'CostFilters' not in budget or len(budget['CostFilters']) == 0 or 'PlannedBudgetLimits' not in budget:
                                      budget.update({'CostFilters': {'Filter': ['None']}})
                                  dataJSONData = json.dumps(budget, cls=DateTimeEncoder)
                                  f.write(dataJSONData)
                                  f.write("\n")
                      s3_upload(account_id, payer_id)
                      start_crawler()
              except Exception as e:
                  logging.warning(e)

          def s3_upload(account_id, payer_id):
              if os.path.getsize("/tmp/data.json") == 0:
                  print(f"No data in file for {prefix}")
                  return
              d = datetime.datetime.now()
              month = d.strftime("%m")
              year = d.strftime("%Y")
              dt_string = d.strftime("%d%m%Y-%H%M%S")
              today = datetime.date.today()
              year = today.year
              month = today.month
              try:
                  s3 = boto3.client('s3', config=Config(s3={'addressing_style': 'path'}))
                  s3.upload_file(f'/tmp/data.json', bucket, f"{prefix}/{prefix}-data/payer_id={payer_id}/year={year}/month={month}/budgets-{account_id}.json")
                  print(f"Budget data in s3 {bucket}")
              except Exception as e:
                  logging.warning("%s" % e)

          def start_crawler():
              glue_client = boto3.client("glue")
              try:
                  glue_client.start_crawler(Name=crawler)
                  print(f"{crawler} has been started")
              except Exception as e:
                  logging.warning("%s" % e)

      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          BUCKET_NAME:
            !Ref DestinationBucket
          ACCOUNT_ID: AWS::AccountId
          CRAWLER_NAME: !Ref Crawler
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref MultiAccountRoleName
  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub
          - '${CFDataName}-Crawler-${Id}'
          - Id: !Select [0, !Split ['-', !Ref AWS::StackName]]
      Role: !Ref GlueRoleArn
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"
  AthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: optimization_data
      Description: Provides a summary view of the budgets
      Name: budgets_view
      QueryString:
        CREATE OR REPLACE VIEW budgets_view AS
        SELECT
          budgetname budget_name
        , CAST(budgetlimit.amount AS decimal) budget_amount
        , CAST(calculatedspend.actualspend.amount AS decimal) actualspend
        , CAST(calculatedspend.forecastedspend.amount AS decimal) forecastedspend
        , timeunit
        , budgettype budget_type
        , account_id
        , timeperiod.start start_date
        , timeperiod."end"  end_date
        , year budget_year
        , month budget_month
        FROM
          optimization_data.budgets_data
        WHERE (budgettype = 'COST')  AND costfilters.filter[1] = 'None'
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt TaskQueue.Arn
  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
      ReceiveMessageWaitTimeSeconds: 20
      DelaySeconds: 2
      KmsMasterKeyId: "alias/aws/sqs"
      QueueName: 'BudgetsModule-TaskQueue'
  EventSourceMapping:
    DependsOn:
      - EventPermission
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt TaskQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn
  LambdaAnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName